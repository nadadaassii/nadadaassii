from flask import Flask, request
import sqlite3
from werkzeug.security import generate_password_hash

# Initialisation de l'application Flask
app = Flask(__name__)

# Fonction pour initialiser la base de données et créer la table des utilisateurs
def init_db():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    # Création de la table des utilisateurs
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL,
        password TEXT NOT NULL
    )
    ''')

    conn.commit()
    conn.close()

# Appel de la fonction pour initialiser la base de données
init_db()

@app.route('/submit', methods=['POST'])
def submit():
    username = request.form['username']
    password = request.form['password']

    # Hachage du mot de passe avant de le stocker dans la base de données
    hashed_password = generate_password_hash(password, method='pbkdf2:sha256', salt_length=8)

    # Connexion à la base de données et insertion de l'utilisateur
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    try:
        cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
        conn.commit()
    except sqlite3.Error as e:
        app.logger.error(f"Erreur de base de données : {e}")
        return 'Erreur interne du serveur', 500
    finally:
        conn.close()

    return 'Utilisateur créé avec succès !'

if __name__ == '__main__':
    # Désactiver le mode debug pour un déploiement en production
    app.run(debug=True)
